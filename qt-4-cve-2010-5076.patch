diff -up qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl.cpp.cve-2010-5076 qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl.cpp
--- qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl.cpp.cve-2010-5076	2012-03-21 15:09:55.048437120 +0100
+++ qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl.cpp	2012-03-21 15:33:42.304297000 +0100
@@ -827,13 +827,11 @@ bool QSslSocketBackendPrivate::startHand
             QString peerName = (verificationPeerName.isEmpty () ? q->peerName() : verificationPeerName);
             QString commonName = configuration.peerCertificate.subjectInfo(QSslCertificate::CommonName);
 
-            QRegExp regexp(commonName, Qt::CaseInsensitive, QRegExp::Wildcard);
-            if (!regexp.exactMatch(peerName)) {
+            if (!isMatchingHostname(commonName.lower(), peerName.lower())) {
                 bool matched = false;
                 foreach (QString altName, configuration.peerCertificate
                          .alternateSubjectNames().values(QSsl::DnsEntry)) {
-                    regexp.setPattern(altName);
-                    if (regexp.exactMatch(peerName)) {
+                    if (isMatchingHostname(altName.lower(), peerName.lower())) {
                         matched = true;
                         break;
                     }
@@ -962,4 +960,44 @@ QList<QSslCertificate> QSslSocketBackend
     return certificates;
 }
 
+bool QSslSocketBackendPrivate::isMatchingHostname(const QString &cn, const QString &hostname)
+{
+    int wildcard = cn.indexOf(QChar('*', 0));
+
+    // Check this is a wildcard cert, if not then just compare the strings
+    if (wildcard < 0)
+        return cn == hostname;
+
+    int firstCnDot = cn.indexOf(QChar('.', 0));
+    int secondCnDot = cn.indexOf(QChar('.', 0), firstCnDot+1);
+
+    // Check at least 3 components
+    if ((-1 == secondCnDot) || (secondCnDot+1 >= cn.length()))
+        return false;
+
+    // Check * is last character of 1st component (ie. there's a following .)
+    if (wildcard+1 != firstCnDot)
+        return false;
+
+    // Check only one star
+    if (cn.lastIndexOf(QChar('*', 0)) != wildcard)
+        return false;
+
+    // Check characters preceding * (if any) match
+    if (wildcard && (hostname.leftRef(wildcard) != cn.leftRef(wildcard)))
+        return false;
+
+    // Check characters following first . match
+    if (hostname.midRef(hostname.indexOf(QChar('.', 0))) != cn.midRef(firstCnDot))
+        return false;
+
+    // Check if the hostname is an IP address, if so then wildcards are not allowed
+    QHostAddress addr(hostname);
+    if (!addr.isNull())
+        return false;
+
+    // Ok, I guess this was a wildcard CN and the hostname matches.
+    return true;
+}
+
 QT_END_NAMESPACE
diff -up qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl_p.h.cve-2010-5076 qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl_p.h
--- qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl_p.h.cve-2010-5076	2012-03-21 15:21:29.757286510 +0100
+++ qt-everywhere-opensource-src-4.6.2/src/network/ssl/qsslsocket_openssl_p.h	2012-03-21 15:21:36.782284672 +0100
@@ -115,6 +115,7 @@ public:
 
     static QSslCipher QSslCipher_from_SSL_CIPHER(SSL_CIPHER *cipher);
     static QList<QSslCertificate> STACKOFX509_to_QSslCertificates(STACK_OF(X509) *x509);
+    Q_AUTOTEST_EXPORT static bool isMatchingHostname(const QString &cn, const QString &hostname);
 };
 
 QT_END_NAMESPACE
