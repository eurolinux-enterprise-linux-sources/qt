Index: b/configure
===================================================================
--- a/configure
+++ b/configure
@@ -2858,6 +2861,9 @@
             *86_64)
                 PLATFORM=qws/linux-x86_64-g++
                 ;;
+            aarch64)
+                PLATFORM=linux-g++-aarch64
+                ;;
             *)
                 PLATFORM=qws/linux-generic-g++
                 ;;
@@ -3303,6 +3309,12 @@
             echo "    ARM (arm)"
         fi
         CFG_HOST_ARCH=arm
+	;;
+    *:*:aarch64*)
+        if [ "$OPT_VERBOSE" = "yes" ]; then
+            echo "    AArch64 (aarch64)"
+        fi
+        CFG_HOST_ARCH=aarch64
         ;;
     Linux:*:sparc*)
         if [ "$OPT_VERBOSE" = "yes" ]; then
diff -up a/src/3rdparty/javascriptcore/JavaScriptCore/JavaScriptCore.pri.aarch64 b/src/3rdparty/javascriptcore/JavaScriptCore/JavaScriptCore.pri
--- a/src/3rdparty/javascriptcore/JavaScriptCore/JavaScriptCore.pri.aarch64	2015-05-07 09:14:47.000000000 -0500
+++ b/src/3rdparty/javascriptcore/JavaScriptCore/JavaScriptCore.pri	2015-05-08 21:48:33.268061013 -0500
@@ -66,6 +66,12 @@ contains(JAVASCRIPTCORE_JIT,no) {
     }
 }
 
+# Hack around AARCH64 fail wrt JSValue.h
+equals(QT_ARCH, aarch64) {
+    message("JavaScriptCore aarch64 hack: -fpermissive")
+    QMAKE_CXXFLAGS += -fpermissive
+}
+
 wince* {
     INCLUDEPATH += $$QT_SOURCE_TREE/src/3rdparty/ce-compat
     SOURCES += $$QT_SOURCE_TREE/src/3rdparty/ce-compat/ce_time.c
diff -up a/src/3rdparty/webkit/Source/JavaScriptCore/JavaScriptCore.pri.aarch64 b/src/3rdparty/webkit/Source/JavaScriptCore/JavaScriptCore.pri
--- a/src/3rdparty/webkit/Source/JavaScriptCore/JavaScriptCore.pri.aarch64	2015-05-07 09:14:45.000000000 -0500
+++ b/src/3rdparty/webkit/Source/JavaScriptCore/JavaScriptCore.pri	2015-05-08 21:48:33.268061013 -0500
@@ -63,6 +63,12 @@ contains (CONFIG, text_breaking_with_icu
     DEFINES += WTF_USE_QT_ICU_TEXT_BREAKING=1
 }
 
+# Hack around AARCH64 fail wrt JSValue.h
+equals(QT_ARCH, aarch64) {
+    message("JavaScriptCore aarch64 hack: -fpermissive")
+    QMAKE_CXXFLAGS += -fpermissive
+}
+
 wince* {
     INCLUDEPATH += $$QT_SOURCE_TREE/src/3rdparty/ce-compat
     INCLUDEPATH += $$PWD/../JavaScriptCore/os-win32
diff --git a/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h b/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h
index 4b0d779..7025f19 100644
--- a/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h
+++ b/src/3rdparty/javascriptcore/JavaScriptCore/wtf/Platform.h
@@ -221,6 +221,14 @@
 #define WTF_CPU_AIX64 1
 #endif
 
+/* CPU(AARCH64) - AArch64 */
+#if defined(__aarch64__)
+#define WTF_CPU_AARCH64 1
+#if defined(__AARCH64EB__)
+#define WTF_CPU_BIG_ENDIAN 1
+#endif
+#endif
+
 /* CPU(ARM) - ARM, any version*/
 #if   defined(arm) \
     || defined(__arm__) \
@@ -885,7 +893,7 @@
 #endif
 
 #if !defined(WTF_USE_JSVALUE64) && !defined(WTF_USE_JSVALUE32) && !defined(WTF_USE_JSVALUE32_64)
-#if (CPU(X86_64) && (OS(UNIX) || OS(WINDOWS) || OS(SOLARIS) || OS(HPUX))) || (CPU(IA64) && !CPU(IA64_32)) || CPU(ALPHA) || CPU(AIX64) || CPU(SPARC64) || CPU(S390X)
+#if (CPU(X86_64) && (OS(UNIX) || OS(WINDOWS) || OS(SOLARIS) || OS(HPUX))) || (CPU(IA64) && !CPU(IA64_32)) || CPU(ALPHA) || CPU(AIX64) || CPU(SPARC64) || CPU(S390X) || CPU(AARCH64)
 #define WTF_USE_JSVALUE64 1
 #elif CPU(ARM) || CPU(PPC64)
 #define WTF_USE_JSVALUE32 1
Index: b/src/corelib/arch/aarch64/arch.pri
===================================================================
--- /dev/null
+++ b/src/corelib/arch/aarch64/arch.pri
@@ -0,0 +1,4 @@
+#
+# AArch64 architecture
+#
+SOURCES += $$QT_ARCH_CPP/qatomic_aarch64.cpp
Index: b/src/corelib/arch/aarch64/qatomic_aarch64.cpp
===================================================================
--- /dev/null
+++ b/src/corelib/arch/aarch64/qatomic_aarch64.cpp
@@ -0,0 +1,70 @@
+/****************************************************************************
+**
+** Copyright (C) 2012, 2013 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore/qglobal.h>
+
+#include <unistd.h>
+#ifdef _POSIX_PRIORITY_SCHEDULING
+# include <sched.h>
+#endif
+#include <time.h>
+
+QT_BEGIN_NAMESPACE
+
+QT_USE_NAMESPACE
+
+Q_CORE_EXPORT void qt_atomic_yield(int *count)
+{
+#ifdef _POSIX_PRIORITY_SCHEDULING
+    if((*count)++ < 50) {
+        sched_yield();
+    } else
+#endif
+    {
+        struct timespec tm;
+        tm.tv_sec = 0;
+        tm.tv_nsec = 2000001;
+        nanosleep(&tm, NULL);
+        *count = 0;
+    }
+}
+
+QT_END_NAMESPACE
Index: b/src/corelib/arch/arch.pri
===================================================================
--- a/src/corelib/arch/arch.pri
+++ b/src/corelib/arch/arch.pri
@@ -31,7 +31,9 @@
                        arch/qatomic_s390.h \
                        arch/qatomic_x86_64.h \
                        arch/qatomic_sh.h \
-                       arch/qatomic_sh4a.h
+                       arch/qatomic_sh4a.h \
+                       arch/qatomic_aarch64.h \
+
 
 QT_ARCH_CPP = $$QT_SOURCE_TREE/src/corelib/arch/$$QT_ARCH
 DEPENDPATH += $$QT_ARCH_CPP
Index: b/src/corelib/arch/qatomic_aarch64.h
===================================================================
--- /dev/null
+++ b/src/corelib/arch/qatomic_aarch64.h
@@ -0,0 +1,335 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QATOMIC_AARCH64_H
+#define QATOMIC_AARCH64_H
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+#define Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
+
+inline bool QBasicAtomicInt::isReferenceCountingNative()
+{ return true; }
+inline bool QBasicAtomicInt::isReferenceCountingWaitFree()
+{ return false; }
+
+#define Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
+
+inline bool QBasicAtomicInt::isTestAndSetNative()
+{ return true; }
+inline bool QBasicAtomicInt::isTestAndSetWaitFree()
+{ return false; }
+
+#define Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
+
+inline bool QBasicAtomicInt::isFetchAndStoreNative()
+{ return true; }
+inline bool QBasicAtomicInt::isFetchAndStoreWaitFree()
+{ return false; }
+
+#define Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
+
+inline bool QBasicAtomicInt::isFetchAndAddNative()
+{ return true; }
+inline bool QBasicAtomicInt::isFetchAndAddWaitFree()
+{ return false; }
+
+#define Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isTestAndSetNative()
+{ return true; }
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isTestAndSetWaitFree()
+{ return false; }
+
+#define Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndStoreNative()
+{ return true; }
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndStoreWaitFree()
+{ return false; }
+
+#define Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddNative()
+{ return true; }
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddWaitFree()
+{ return false; }
+
+#ifndef Q_DATA_MEMORY_BARRIER
+# define Q_DATA_MEMORY_BARRIER asm volatile("dmb sy\n":::"memory")
+#endif
+#ifndef Q_COMPILER_MEMORY_BARRIER
+# define Q_COMPILER_MEMORY_BARRIER asm volatile("":::"memory")
+#endif
+
+inline bool QBasicAtomicInt::ref()
+{
+    int newValue;
+
+    Q_COMPILER_MEMORY_BARRIER;
+    newValue = __atomic_add_fetch(&_q_value, 1, __ATOMIC_ACQ_REL);
+    Q_COMPILER_MEMORY_BARRIER;
+
+    return newValue != 0;
+}
+
+inline bool QBasicAtomicInt::deref()
+{
+    int newValue;
+
+    Q_COMPILER_MEMORY_BARRIER;
+    newValue = __atomic_sub_fetch(&_q_value, 1, __ATOMIC_ACQ_REL);
+    Q_COMPILER_MEMORY_BARRIER;
+
+    return newValue != 0;
+}
+
+inline bool QBasicAtomicInt::testAndSetRelaxed(int expectedValue, int newValue)
+{
+    bool val;
+
+    Q_COMPILER_MEMORY_BARRIER;
+    val =  __atomic_compare_exchange_n (&_q_value, &expectedValue, newValue,
+					false, __ATOMIC_RELAXED, __ATOMIC_RELAXED);
+    Q_COMPILER_MEMORY_BARRIER;
+    return val;
+}
+
+inline int QBasicAtomicInt::fetchAndStoreRelaxed(int newValue)
+{
+    int val;
+    Q_COMPILER_MEMORY_BARRIER;
+    val = __atomic_exchange_n(&_q_value, newValue, __ATOMIC_RELAXED);
+    Q_COMPILER_MEMORY_BARRIER;
+    return val;
+}
+
+inline int QBasicAtomicInt::fetchAndAddRelaxed(int valueToAdd)
+{
+    int val;
+    Q_COMPILER_MEMORY_BARRIER;
+    val = __atomic_fetch_add(&_q_value, valueToAdd, __ATOMIC_RELAXED);
+    Q_COMPILER_MEMORY_BARRIER;
+    return val;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetRelaxed(T *expectedValue, T *newValue)
+{
+    bool val;
+    Q_COMPILER_MEMORY_BARRIER;
+    val =  __atomic_compare_exchange_n (&_q_value, &expectedValue, newValue,
+					false, __ATOMIC_RELAXED, __ATOMIC_RELAXED);
+    Q_COMPILER_MEMORY_BARRIER;
+    return val;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreRelaxed(T *newValue)
+{
+    T *val;
+    Q_COMPILER_MEMORY_BARRIER;
+    val = __atomic_exchange_n(&_q_value, newValue, __ATOMIC_RELAXED);
+    Q_COMPILER_MEMORY_BARRIER;
+    return val;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddRelaxed(qptrdiff valueToAdd)
+{
+    T *val;
+    Q_COMPILER_MEMORY_BARRIER;
+    val = __atomic_fetch_add(&_q_value, valueToAdd, __ATOMIC_RELAXED);
+    Q_COMPILER_MEMORY_BARRIER;
+    return val;
+}
+
+inline bool QBasicAtomicInt::testAndSetAcquire(int expectedValue, int newValue)
+{
+    bool returnValue = testAndSetRelaxed(expectedValue, newValue);
+    Q_DATA_MEMORY_BARRIER;
+    return returnValue;
+}
+
+inline bool QBasicAtomicInt::testAndSetRelease(int expectedValue, int newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    return testAndSetRelaxed(expectedValue, newValue);
+}
+
+inline bool QBasicAtomicInt::testAndSetOrdered(int expectedValue, int newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    bool returnValue = testAndSetRelaxed(expectedValue, newValue);
+    Q_COMPILER_MEMORY_BARRIER;
+    return returnValue;
+}
+
+inline int QBasicAtomicInt::fetchAndStoreAcquire(int newValue)
+{
+    int returnValue = fetchAndStoreRelaxed(newValue);
+    Q_DATA_MEMORY_BARRIER;
+    return returnValue;
+}
+
+inline int QBasicAtomicInt::fetchAndStoreRelease(int newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    return fetchAndStoreRelaxed(newValue);
+}
+
+inline int QBasicAtomicInt::fetchAndStoreOrdered(int newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    int returnValue = fetchAndStoreRelaxed(newValue);
+    Q_COMPILER_MEMORY_BARRIER;
+    return returnValue;
+}
+
+inline int QBasicAtomicInt::fetchAndAddAcquire(int valueToAdd)
+{
+    int returnValue = fetchAndAddRelaxed(valueToAdd);
+    Q_DATA_MEMORY_BARRIER;
+    return returnValue;
+}
+
+inline int QBasicAtomicInt::fetchAndAddRelease(int valueToAdd)
+{
+    Q_DATA_MEMORY_BARRIER;
+    return fetchAndAddRelaxed(valueToAdd);
+}
+
+inline int QBasicAtomicInt::fetchAndAddOrdered(int valueToAdd)
+{
+    Q_DATA_MEMORY_BARRIER;
+    int returnValue = fetchAndAddRelaxed(valueToAdd);
+    Q_COMPILER_MEMORY_BARRIER;
+    return returnValue;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetAcquire(T *expectedValue, T *newValue)
+{
+    bool returnValue = testAndSetRelaxed(expectedValue, newValue);
+    Q_DATA_MEMORY_BARRIER;
+    return returnValue;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetRelease(T *expectedValue, T *newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    return testAndSetRelaxed(expectedValue, newValue);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    bool returnValue = testAndSetAcquire(expectedValue, newValue);
+    Q_COMPILER_MEMORY_BARRIER;
+    return returnValue;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreAcquire(T *newValue)
+{
+    T *returnValue = fetchAndStoreRelaxed(newValue);
+    Q_DATA_MEMORY_BARRIER;
+    return returnValue;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreRelease(T *newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    return fetchAndStoreRelaxed(newValue);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
+{
+    Q_DATA_MEMORY_BARRIER;
+    T *returnValue = fetchAndStoreRelaxed(newValue);
+    Q_COMPILER_MEMORY_BARRIER;
+    return returnValue;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddAcquire(qptrdiff valueToAdd)
+{
+    T *returnValue = fetchAndAddRelaxed(valueToAdd);
+    Q_DATA_MEMORY_BARRIER;
+    return returnValue;
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddRelease(qptrdiff valueToAdd)
+{
+    Q_DATA_MEMORY_BARRIER;
+    return fetchAndAddRelaxed(valueToAdd);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
+{
+    Q_DATA_MEMORY_BARRIER;
+    T *returnValue = fetchAndAddRelaxed(valueToAdd);
+    Q_COMPILER_MEMORY_BARRIER;
+    return returnValue;
+}
+
+#undef Q_DATA_MEMORY_BARRIER
+#undef Q_COMPILER_MEMORY_BARRIER
+
+QT_END_NAMESPACE
+
+QT_END_HEADER
+
+#endif // QATOMIC_AARCH64_H
Index: b/src/corelib/arch/qatomic_arch.h
===================================================================
--- a/src/corelib/arch/qatomic_arch.h
+++ b/src/corelib/arch/qatomic_arch.h
@@ -92,6 +92,8 @@
 #  include "QtCore/qatomic_sh4a.h"
 #elif defined(QT_ARCH_NACL)
 #  include "QtCore/qatomic_generic.h"
+#elif defined(QT_ARCH_AARCH64)
+#  include "QtCore/qatomic_aarch64.h"
 #else
 #  error "Qt has not been ported to this architecture"
 #endif
diff --git a/include/QtCore/qatomic_aarch64.h b/include/QtCore/qatomic_aarch64.h
new file mode 100644
index 0000000..2049aec
--- /dev/null
+++ b/include/QtCore/qatomic_aarch64.h
@@ -0,0 +1 @@
+#include "../../src/corelib/arch/qatomic_aarch64.h"
Index: b/src/corelib/io/qfilesystemwatcher_inotify.cpp
===================================================================
--- a/src/corelib/io/qfilesystemwatcher_inotify.cpp
+++ b/src/corelib/io/qfilesystemwatcher_inotify.cpp
@@ -138,6 +138,11 @@
 # define __NR_inotify_add_watch 285
 # define __NR_inotify_rm_watch  286
 # define __NR_inotify_init1     328
+#elif defined (__aarch64__)
+# define __NR_inotify_init1     26
+# define __NR_inotify_add_watch 27
+# define __NR_inotify_rm_watch  28
+// no inotify_init for aarch64
 #else
 # error "This architecture is not supported. Please talk to qt-bugs@trolltech.com"
 #endif
@@ -155,7 +160,11 @@
 
 static inline int inotify_init()
 {
+#ifdef __NR_inotify_init
     return syscall(__NR_inotify_init);
+#else
+    return syscall(__NR_inotify_init1, 0);
+#endif
 }
 
 static inline int inotify_add_watch(int fd, const char *name, __u32 mask)
